import{b as t,d as e,c as s,i,w as r,e as n}from"./main-DrryrVbc.js";class o{static{e(this.prototype,"error",[s],function(){return null})}#t=void i(this,"error");static{e(this.prototype,"value",[s],function(){return null})}#e=void i(this,"value");static{e(this.prototype,"status",[s],function(){return null})}#s=void i(this,"status");static{e(this.prototype,"isResolved",[s],function(){return!1})}#i=void i(this,"isResolved");static{e(this.prototype,"isRejected",[s],function(){return!1})}#r=void i(this,"isRejected");get isFinished(){return this.isResolved||this.isRejected}get isSettled(){return this.isFinished}get isPending(){return this.isLoading}get isLoading(){return!this.isFinished}get isError(){let t=this.status&&this.status>=400,e=this.isRejected;return t||e}}function u({on:t},e,s={}){let i=new o,n=new AbortController;return t.cleanup(()=>n.abort()),r(fetch(e,{signal:n.signal,...s}).then(t=>(i.status=t.status,t.headers.get("Content-Type")?.includes("json")?t.json():t.text())).then(t=>{i.isResolved=!0,i.value=t}).catch(t=>{i.isRejected=!0,i.error=t})),i}function a(e,s){return t(t=>{let i,r="string"==typeof e?e:e(),n={};if("string"==typeof r)i=r;else{let{url:t,...e}=r;i=t,n=e}return s&&(n={...n,...s}),u(t,i,n)})}n(a);export{a as RemoteData,o as State,u as remoteData};
